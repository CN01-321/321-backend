interface PublicProfile {
    id: ID!
    name: String!,
    bio: String,
    pfp: String,
    feedback: [Feedback!]!
}

interface Profile implements PublicProfile {
    id: ID!
    name: String!,
    email: String!,
    address: String!,
    phone: String,
    bio: String,
    latitude: Float!,
    longitude: Float!,
    pfp: String,
    feedback: [Feedback!]!
}

type Owner implements Profile & PublicProfile {
    id: ID!
    name: String!,
    email: String!,
    address: String!,
    phone: String,
    bio: String,
    latitude: Float!,
    longitude: Float!,
    pfp: String,
    pets: [Pet!]!
    offer: [Offer!]!
    feedback: [Feedback!]!
}

enum PetType {
    DOG,
    CAT,
    BIRD,
    RABBIT
}

enum PetSize {
    SMALL,
    MEDIUM,
    LARGE
}

type Pet implements PublicProfile {
    id: ID!,
    name: String!,
    bio: String,
    petType: PetType!
    petSize: PetSize!,
    isVaccinated: Boolean,
    isFriendly: Boolean,
    isNeutered: Boolean,
    pfp: String,
    feedback: [Feedback!]!
}

type Offer {
    id: ID!,
    startDay: String!
    endDay: String!
    requestedPets: [Pet!]!
    details: String!,
}


type Carer implements Profile & PublicProfile {
    id: ID!
    name: String!,
    email: String!,
    address: String!,
    phone: String,
    bio: String,
    latitude: Float!,
    longitude: Float!,
    pfp: String,
    feedback: [Feedback!]!
    unavailability: [Unavailability!]!,
    preferedPets: [PetPreference!]!,
    licences: [Licence!]!,
    requests: [Request!]!,
}

type Unavailability {
    startDay: String!
}

type PetPreference {
    petType: PetType!,
    petSize: PetSize!,
}

type Licence {
    licenceName: String!,
    licenceNo: String!,
}

type Request {
    id: ID!,
    owner: Owner!,
    startDay: String!,
    endDay: String!,
    details: String!,
    staus: RequestStatus!,
    requestedPets: [Pet!]!,
    transactions: [Transaction!]!,
}

enum RequestStatus {
    PENDING,
    PAID,
    COMPLETE,
}

type Transaction {
    date: String!,
    status: TransactionStatus!
}

enum TransactionStatus {
    PAID,
    REFUNDED,
}

type Feedback {
    commenter: PublicProfile!
    rating: Int,
    comment: String!,
    img: String,
    replies: [Reply!]!
} 

type Reply {
    replier: PublicProfile!,
    comment: String!,
}


type Query {
    owner(id: ID!): Owner
}

type Mutation {
    addOwner(name: String): Owner
}